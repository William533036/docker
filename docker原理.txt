chroot
一个隔离的用户空间应该隔离什么？
	1.隔离PID:隔离环境的进程树和宿主机的进程树是隔离的
		进程树是一种进程关系表示方法。由父进程和子进程两部分组成。一个程序正常运行的话，在内存中会生成一个或多和进程 ，而进程树指的是和这进程相关的所有进程（主要是指那些依赖它的进程
	2.隔离挂载树(Mount)
	3.隔离UTS:主机名、域名(domain)
	UTS（UNIX Time-sharing System）允许每个容器拥有独立的hostname和domain name，使其在网络上可以被视作一个独立的节点而非主机上的一个进程。
	域名（英语：Domain Name），又称网域，是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时对计算机的定位标识（有时也指地理位置）。 [1] 
	由于IP地址具有不方便记忆并且不能显示地址组织的名称和性质等缺点，人们设计出了域名，并通过网域名称系统（DNS，Domain Name System）来将域名和IP地址相互映射，使人更方便地访问互联网，而不用去记住能够被机器直接读取的IP地址数串。
	4.隔离user、group
	5.隔离network
	6.隔离IPC:进程间通信
	在linux下的多个进程间的通信机制叫做IPC(Inter-Process Communication)，它是多个进程之间相互沟通的一种方法。在linux下有多种进程间通信的方法：半双工管道、命名管道、消息队列、信号、信号量、共享内存、内存映射文件，套接字等等。使用这些机制可以为linux下的网络服务器开发提供灵活而又坚固的框架。
	https://blog.csdn.net/a987073381/article/details/52006729
	通信方式
		socket
		Unix sock
	
	名称空间(namespace)
	
	虚拟化使用的资源
		可压缩型:		CPU
		不可压缩型: MEMORY 内存不够了OOM OutOfMemoryError
		
	给容器分配资源
		静态:
		动态: 
		
	CGroups(Control Groups)内核本身实现的功能
		可以实现各种系统资源动态、静态分配
		可以创建一个隔离环境，共享底层内核空间
		cpu
		blkio
		inux Cgroup（Control Groups）是Linux内核提供的用于限制、记录、隔离进程组可以使用的资源（cpu、memory、IO等）的一种机制。在/boot下面的对应config文件里查看Cgroup内核选项：
		https://www.cnblogs.com/jimbo17/p/8145582.html
	
	LXC: linux Container
		基于模板快速创建容器，容器中有完整的文件系统，但是和底层系统公用内核
		底层的文件系统和容器中的文件系统是隔离的
		
	Docker: LXC 二次封装
		lxc-create docker仓库
		
	镜像:用来创建容器的模板，放在镜像仓库中
	
	优点:
		降低开发周期、成本
		
	docker 镜像: 启动容器
	构建方法: 首先构建基础操作系统，然后在基础系统上构成存在应用程序的系统
		联合挂载: 首先挂载基础层，然后挂载包含指定程序的层
	说明:
		分层构建的各层都是共享的
		分层构建的各层都是只读的
		
	容器是基于写时复制实现操作(copy on write)
	
	docker的编排工具
		machine+swarm+compose
		meos+marathon
		kubernetes(k8s)
		
	coreos	
			
	docker
		libcontainer-RunC
		RunC格式的镜像文件: https://dockerhub.com
		
		
	kvm
		虚拟机
		复杂
		启动过程相对慢(分钟)
		模板文件较大
		和物理机完全隔离
		模拟一个完整系统，可以登录并实现管理
		
	docker
		直接虚拟出来一个用户空间
		使用简单
		启动非常快(秒级)
		模板文件很小
		在一定程度上和物理机隔离
		仅仅是模拟一部分用户空间，不方便进行管理
		
		
	docker架构(C/S)
		client
			docker run
			docker pull
			...
		DockerHost
			Docker Daemon
				image-->container
		
		Registry
		
	docker daemon
		仅仅监听在本地的Unix sock
		也可以监听在socket
		
	registry	
		用户认证
		版本仓库(repo)
			名称: 应用名称
			tag: 版本仓库中具体镜像的标签,一个镜像可以有多个标签
		
		标识方法: 版本库名:tag
							nginx:1.4
	
	使用场景:
		快速部署服务
		多租户
		实现隔离
		让一个主机运行多个容器
		提高开发效率
		简化配置过程
		实现软件的跨平台
	
		
		
		
		
		
		
		
		
		
